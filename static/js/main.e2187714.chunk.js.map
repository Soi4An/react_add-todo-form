{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","userDate","usersFromServer","find","user","userEmail","userName","className","href","TodoInfo","todoId","TodoList","todos","map","todo","App","useState","todosFromServer","setTodos","setTitle","hasTitleErr","setHasTitleErr","selectUserId","setSelectUserId","hasSelectErr","setHasSelectErr","action","method","onSubmit","event","preventDefault","arrayItemsWithId","newTodo","Math","max","item","currentTodos","htmlFor","placeholder","type","value","onChange","text","target","test","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2187714.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\n\nimport usersFromServer from '../../api/users';\nimport { User } from '../../types/User';\n\ntype Props = {\n  userId: number,\n};\n\nexport const UserInfo: React.FC<Props> = ({ userId }) => {\n  const userDate: User | undefined = usersFromServer\n    .find((user: User) => user.id === userId);\n\n  let userEmail = '';\n  let userName = '';\n\n  if (userDate) {\n    userEmail = userDate.email;\n    userName = userDate.name;\n  }\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${userEmail}`}>\n      {userName}\n    </a>\n  );\n};\n","import React from 'react';\n\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  completed: boolean,\n  title: string,\n  todoId: number,\n  userId: number,\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  completed, title, todoId, userId,\n}) => (\n  <article\n    data-id={todoId}\n    className={`TodoInfo ${completed && 'TodoInfo--completed'}`}\n  >\n    <h2 className=\"TodoInfo__title\">{title}</h2>\n\n    <UserInfo userId={userId} />\n  </article>\n);\n","import React from 'react';\n\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo\n        key={todo.id}\n        completed={todo.completed}\n        title={todo.title}\n        todoId={todo.id}\n        userId={todo.userId}\n      />\n    ))}\n  </section>\n);\n","import { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList/TodoList';\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(todosFromServer);\n\n  const [title, setTitle] = useState('');\n  const [hasTitleErr, setHasTitleErr] = useState(false);\n  const [selectUserId, setSelectUserId] = useState(0);\n  const [hasSelectErr, setHasSelectErr] = useState(false);\n\n  const getBiggerId = (arrayItemsWithId: Todo[]) => {\n    const maxId = Math.max(...arrayItemsWithId.map(item => item.id));\n\n    return maxId + 1;\n  };\n\n  const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const text = event.target.value;\n\n    if (/^[A-Za-zА-Яа-я0-9 ]*$/.test(text)) {\n      setTitle(text);\n    }\n\n    if (text) {\n      setHasTitleErr(false);\n    }\n  };\n\n  const handleSelectUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectUserId(+event.target.value);\n    if (+event.target.value !== 0) {\n      setHasSelectErr(false);\n    }\n  };\n\n  const reset = () => {\n    setTitle('');\n    setSelectUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleErr(!title);\n    setHasSelectErr(selectUserId === 0);\n\n    if (!title || selectUserId === 0) {\n      return;\n    }\n\n    const newTodoId = getBiggerId(todos);\n    const newTodo = {\n      id: newTodoId,\n      title,\n      completed: false,\n      userId: selectUserId,\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n    reset();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"input--title--add-todo-name\">Title: </label>\n          <input\n            id=\"input--title--add-todo-name\"\n            placeholder=\"Enter a title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={handleTitle}\n          />\n          {hasTitleErr\n            && (<span className=\"error\"> Please enter a title</span>)}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"select--user--add-todo-user\">User: </label>\n          <select\n            id=\"select--user--add-todo-user\"\n            data-cy=\"userSelect\"\n            value={selectUserId}\n            onChange={handleSelectUser}\n          >\n            <option key=\"0\" value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {hasSelectErr\n            && (<span className=\"error\"> Please choose a user</span>)}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}